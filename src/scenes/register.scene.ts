import {composeWizardScene} from "../helpers/scene.servise";
import {logger} from "../helpers/logger";
import {getDomain} from "../helpers/domain.service";

interface ISocial {
    name: string,
    link: string,
}

interface IKeyboardElement {
    text: string,
    callback_data: string
}

interface IUser {
    name: string | null,
    phone: string | null,
    email: string | null,
    role: string | null,
    password: string | null
    socials: ISocial[],
    platforms: ISocial[],
}

const socials = [
    'Youtube',
    'VK',
    'Telegram',
    'Instagram',
    'OK',
    'Dzen',
    'Rutube',
    'Yappy',
    'Tiktok',
]

const social_names = {
    Youtube: '–Æ—Ç—É–±',
    VK: '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ',
    Telegram: '–¢–µ–ª–µ–≥—Ä–∞–º',
    Instagram: '–ò–Ω—Å—Ç–∞–≥—Ä–∞–º',
    OK: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
    Dzen: '–î–∑–µ–Ω',
    Rutube: 'Rutube',
    Yappy: 'Yappy',
    Tiktok: 'Tiktok',
}

export const registerScene = composeWizardScene(
    (ctx) => {
        ctx.wizard.state.selected_social = null;
        ctx.wizard.state.selected_social_link = null;
        ctx.wizard.state.email_error = false;
        ctx.wizard.state.link_error = false;
        ctx.wizard.state.name_error = false;
        ctx.wizard.state.user_data = {
            name: null,
            email: null,
            phone: null,
            role: null,
            password: null,
            socials: [],
        };

        ctx.reply("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üì±–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\" –≤ –º–µ–Ω—é –±–æ—Ç–∞", {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                            request_contact: true,
                        },
                    ],
                ],
                one_time_keyboard: true,
            },
        });

        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.wizard.state.name_error) {
            ctx.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏');
            return ctx.wizard.next();
        }

        if (typeof ctx.message !== 'undefined' && typeof ctx.message.contact !== 'undefined' && typeof ctx.message.contact.phone_number !== 'undefined') {
            ctx.wizard.state.user_data.phone = ctx.message.contact.phone_number;
            if (!await checkUserExist(ctx.message.contact.phone_number)) {
                await storePhone(ctx.message.contact.phone_number, ctx.message.chat.id, ctx.message.from.username);
            } else {
                ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
                return ctx.scene.leave();
            }
        } else {
            ctx.wizard.cursor = ctx.wizard.cursor - 1;
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }

        ctx.reply('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è');
        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.wizard.state.email_error) {
            ctx.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ email');
            return ctx.wizard.next();
        }

        if (ctx.message !== undefined && ctx.message.text !== undefined) {
            ctx.wizard.state.user_data.name = ctx.message.text;
        } else {
            ctx.wizard.state.name_error = true;
            ctx.wizard.cursor = ctx.wizard.cursor - 1;
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }

        ctx.wizard.state.name_error = false;
        ctx.reply('–°–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π email');
        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.wizard.state.user_data.email == null && !isEmailValid(ctx.message.text)) {
            ctx.wizard.state.email_error = true;
            ctx.wizard.cursor = ctx.wizard.cursor - 1;
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }

        ctx.wizard.state.email_error = false;
        ctx.wizard.state.user_data.email = ctx.message.text;
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:', {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–°–µ–ª–ª–µ—Ä", callback_data: "seller"}],
                    [{text: "–ë–ª–æ–≥–≥–µ—Ä", callback_data: "blogger"}],
                    [{text: "–ê–≥–µ–Ω—Å—Ç–≤–æ", callback_data: "agent"}]
                ]
            }
        });

        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.wizard.state.user_data.role === null) {
            ctx.wizard.cursor = ctx.wizard.cursor - 1;
            return ctx.wizard.steps[ctx.wizard.cursor](ctx);
        }
        if (ctx.wizard.state.user_data.role === 'blogger') {
            const keyboard: IKeyboardElement[][] = [];
            socials.forEach(social => {
                if (!ctx.wizard.state.user_data.socials.find(({name}) => name === social)) {
                    keyboard.push([{
                        text: social_names[social],
                        callback_data: social,
                    }]);
                }
            })
            let text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å:';
            if (ctx.wizard.state.user_data.socials.length !== 0) {
                text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å';
                keyboard.push([{
                    text: '–ù–∞–∑–∞–¥',
                    callback_data: 'skip_social',
                }]);
            }
            ctx.reply(text, {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } else {
            return ctx.wizard.steps[7](ctx);
        }

        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.wizard.state.user_data.role === 'blogger') {
            if (typeof ctx.update !== 'undefined' && socials.includes(ctx.wizard.state.selected_social)) {
                if (ctx.wizard.state.link_error) {
                    ctx.reply(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏`);
                } else {
                    ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ ${social_names[ctx.wizard.state.selected_social]}`);
                }
            } else {
                ctx.wizard.state.link_error = true;
                ctx.wizard.cursor = ctx.wizard.cursor - 1;
                return ctx.wizard.steps[ctx.wizard.cursor](ctx);
            }
        }

        return ctx.wizard.next();
    },
    (ctx) => {
        if (ctx.wizard.state.user_data.role === 'blogger') {
            if (typeof ctx.message !== 'undefined') {
                if (!isValidUrl(ctx.message.text)) {
                    ctx.wizard.state.link_error = true;
                    ctx.wizard.cursor = ctx.wizard.cursor - 1;
                    return ctx.wizard.steps[ctx.wizard.cursor](ctx);
                }

                ctx.wizard.state.link_error = false;
                ctx.wizard.state.user_data.socials.push({
                    name: ctx.wizard.state.selected_social,
                    link: ctx.message.text
                })
                ctx.reply(`–í–∞—à –±–ª–æ–≥ –≤ ${social_names[ctx.wizard.state.selected_social]} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –±–ª–æ–≥?(–î–∞/–Ω–µ—Ç):`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: "–î–∞", callback_data: "add_social"}, {text: "–ù–µ—Ç", callback_data: "skip_social"}],
                        ]
                    }
                });
            } else {
                ctx.wizard.state.email_error = true;
                ctx.wizard.cursor = ctx.wizard.cursor - 1;
                return ctx.wizard.steps[ctx.wizard.cursor](ctx);
            }
        }

        return ctx.wizard.next();
    },

    async (ctx, done: () => any) => {
        const user = await storeUser(ctx.wizard.state.user_data);
        if (user) {
            if (ctx.wizard.state.user_data.role === 'blogger') {
                ctx.reply(`–°–ø–∞—Å–∏–±–æ\\! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\\. –ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞`, {
                    parse_mode: 'MarkdownV2',
                });
            } else {
                const new_phone = ctx.wizard.state.user_data.phone.replace("+", "\\+");
                const domain = getDomain();
                ctx.reply(`üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É

–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: https://lk\\.adswap\\.ru/
–õ–æ–≥–∏–Ω: \`${new_phone}\`
–ü–∞—Ä–æ–ª—å: \`${user.password}\`

–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ —Å–µ—Ä–≤–∏—Å–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª [–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏](https://adswap.ru/instructions)\\.
–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ [—Å—Å—ã–ª–∫–µ](https://t.me/adswap_admin)\\.`, {
                    parse_mode: 'MarkdownV2',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url: domain + '?token=' + user.token}],
                        ]
                    }
                });
            }
        } else {
            ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏`, {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑',
                            callback_data: 'restart',
                        }],
                    ]
                }
            });
        }

        ctx.wizard.next()
        ctx.scene.leave();
        return done();
    },
);

async function checkUserExist(phone: string) {
    const domain = getDomain();
    const response = await fetch(domain + '/api/users/exist?phone=' + phone, {
        method: 'GET',
        headers: {
            'content-type': 'application/json;charset=UTF-8',
        },
    })

    return response.ok;
}

async function storePhone(phone: string, chatId: number, username: string) {
    const domain = getDomain();
    const response = await fetch(domain + '/api/phones', {
        method: 'POST',
        headers: {
            'content-type': 'application/json;charset=UTF-8',
        },
        body: JSON.stringify({
            phone: phone,
            username: username,
            chat_id: chatId
        }),
    })

    if (response.ok) {
        return true;
    } else {
        const result = await response.text()
        logger.info(result);
        return false;
    }
}

async function storeUser(user: IUser) {
    const domain = getDomain();
    user.password = generateRandomString(16);
    user.platforms = user.socials;
    const response = await fetch(domain + '/api/users', {
        method: 'POST',
        headers: {
            'content-type': 'application/json;charset=UTF-8',
        },
        body: JSON.stringify(user),
    })

    if (response.ok) {
        const parsed_response = await response.json()
        return {password: user.password, token: parsed_response.token};
    } else {
        const result = await response.text()
        logger.info(result);
        return false;
    }
}

function generateRandomString(length: number) {
    return Math.random().toString(36).substring(2, length + 2);
}

function isEmailValid(value: string) {
    const EMAIL_REGEXP = /^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/iu;
    return EMAIL_REGEXP.test(value);
}

const isValidUrl = (str) => {
    const pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d@%_.~+]*)*' + // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
        '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
    return pattern.test(str);
};